services:
  # MLflow PostgreSQL Database
  mlflow-postgres:
    image: postgres:15-alpine
    container_name: mlflow_postgres
    environment:
      POSTGRES_USER: mlflow
      POSTGRES_PASSWORD: mlflow_password
      POSTGRES_DB: mlflow_db
    volumes:
      - mlflow_postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - fraud_detection_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mlflow"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # MLflow Tracking Server
  mlflow-server:
    build:
      context: ./mlflow_server
      dockerfile: Dockerfile.mlflow
    container_name: mlflow_server
    depends_on:
      mlflow-postgres:
        condition: service_healthy
    environment:
      BACKEND_STORE_URI: postgresql://mlflow:mlflow_password@mlflow-postgres:5432/mlflow_db
      ARTIFACT_ROOT: /mlflow/artifacts
    volumes:
      - mlflow_artifacts:/mlflow/artifacts
    ports:
      - "5000:5000"
    networks:
      - fraud_detection_network
    command: >
      mlflow server
      --backend-store-uri postgresql://mlflow:mlflow_password@mlflow-postgres:5432/mlflow_db
      --default-artifact-root /mlflow/artifacts
      --host 0.0.0.0
      --port 5000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Airflow PostgreSQL Database
  airflow-postgres:
    image: postgres:15
    container_name: airflow_postgres
    environment:
      POSTGRES_USER: ${AIRFLOW_POSTGRES_USER}
      POSTGRES_PASSWORD: ${AIRFLOW_POSTGRES_PASSWORD}
      POSTGRES_DB: ${AIRFLOW_POSTGRES_DB}
    volumes:
      - airflow_postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - fraud_detection_network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: unless-stopped

  # Airflow Initialization
  airflow-init:
    image: apache/airflow:2.10.4-python3.11
    container_name: airflow_init
    depends_on:
      airflow-postgres:
        condition: service_healthy
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${AIRFLOW_POSTGRES_USER}:${AIRFLOW_POSTGRES_PASSWORD}@airflow-postgres:5432/${AIRFLOW_POSTGRES_DB}
      AIRFLOW__CORE__FERNET_KEY: ''
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${AIRFLOW_WWW_USER}
      _AIRFLOW_WWW_USER_PASSWORD: ${AIRFLOW_WWW_PASSWORD}
      _PIP_ADDITIONAL_REQUIREMENTS: 'apache-airflow-providers-docker'
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./airflow/config:/opt/airflow/config
      - ./data:/opt/airflow/data
      - ./models:/opt/airflow/models
      - ./src:/opt/airflow/src
    networks:
      - fraud_detection_network
    entrypoint: /bin/bash
    command:
      - -c
      - |
        mkdir -p /opt/airflow/logs /opt/airflow/dags /opt/airflow/plugins
        airflow db migrate
        airflow users create --username ${AIRFLOW_WWW_USER} --password ${AIRFLOW_WWW_PASSWORD} --firstname Admin --lastname User --role Admin --email admin@example.com || true
        echo "Airflow initialization complete"

  # Airflow Webserver
  airflow-webserver:
    image: apache/airflow:2.10.4-python3.11
    container_name: airflow_webserver
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${AIRFLOW_POSTGRES_USER}:${AIRFLOW_POSTGRES_PASSWORD}@airflow-postgres:5432/${AIRFLOW_POSTGRES_DB}
      AIRFLOW__CORE__FERNET_KEY: ''
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
      _PIP_ADDITIONAL_REQUIREMENTS: 'apache-airflow-providers-docker'
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./airflow/config:/opt/airflow/config
      - ./data:/opt/airflow/data
      - ./models:/opt/airflow/models
      - ./src:/opt/airflow/src
    ports:
      - "8080:8080"
    networks:
      - fraud_detection_network
    command: webserver
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # Airflow Scheduler
  airflow-scheduler:
    image: apache/airflow:2.10.4-python3.11
    container_name: airflow_scheduler
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${AIRFLOW_POSTGRES_USER}:${AIRFLOW_POSTGRES_PASSWORD}@airflow-postgres:5432/${AIRFLOW_POSTGRES_DB}
      AIRFLOW__CORE__FERNET_KEY: ''
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
      DOCKER_HOST: unix:///var/run/docker.sock
      _PIP_ADDITIONAL_REQUIREMENTS: 'apache-airflow-providers-docker'
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./airflow/config:/opt/airflow/config
      - ./data:/opt/airflow/data
      - ./models:/opt/airflow/models
      - ./src:/opt/airflow/src
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - fraud_detection_network
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # Fraud Detection API
  fraud-api:
    build:
      context: .
      dockerfile: api/Dockerfile
    container_name: fraud_api
    depends_on:
      - mlflow-server
    volumes:
      - ./models:/app/models
    ports:
      - "8000:8080"
    networks:
      - fraud_detection_network
    environment:
      MLFLOW_TRACKING_URI: http://mlflow-server:5000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

volumes:
  mlflow_postgres_data:
    driver: local
  mlflow_artifacts:
    driver: local
  airflow_postgres_data:
    driver: local

networks:
  fraud_detection_network:
    driver: bridge
